diff -ruN OldBlock/block/Kconfig.iosched NewBlock/block/Kconfig.iosched
--- OldBlock/block/Kconfig.iosched	1969-12-31 16:00:00.000000000 -0800
+++ NewBlock/block/Kconfig.iosched	2018-05-05 20:29:43.069032000 -0700
@@ -0,0 +1,78 @@
+if BLOCK
+
+menu "IO Schedulers"
+
+config IOSCHED_NOOP
+	bool
+	default y
+	---help---
+	  The no-op I/O scheduler is a minimal scheduler that does basic merging
+	  and sorting. Its main uses include non-disk based block devices like
+	  memory devices, and specialised software or hardware environments
+	  that do their own scheduling and require only minimal assistance from
+	  the kernel.
+
+config IOSCHED_DEADLINE
+	tristate "Deadline I/O scheduler"
+	default y
+	---help---
+	  The deadline I/O scheduler is simple and compact. It will provide
+	  CSCAN service with FIFO expiration of requests, switching to
+	  a new point in the service tree and doing a batch of IO from there
+	  in case of expiry.
+
+config IOSCHED_CFQ
+	tristate "CFQ I/O scheduler"
+	default y
+	---help---
+	  The CFQ I/O scheduler tries to distribute bandwidth equally
+	  among all processes in the system. It should provide a fair
+	  and low latency working environment, suitable for both desktop
+	  and server systems.
+
+	  This is the default I/O scheduler.
+
+config CFQ_GROUP_IOSCHED
+	bool "CFQ Group Scheduling support"
+	depends on IOSCHED_CFQ && BLK_CGROUP
+	default n
+	---help---
+	  Enable group IO scheduling in CFQ.
+	  
+config IOSCHED_SSTF
+	tristate "SSTF CLOOK Scheduler"
+	default y
+	---help---
+	  This scheduler is a CLOOK variant of SSTF.
+
+choice
+	prompt "Default I/O scheduler"
+	default DEFAULT_CFQ
+	help
+	  Select the I/O scheduler which will be used by default for all
+	  block devices.
+
+	config DEFAULT_DEADLINE
+		bool "Deadline" if IOSCHED_DEADLINE=y
+
+	config DEFAULT_CFQ
+		bool "CFQ" if IOSCHED_CFQ=y
+
+	config DEFAULT_NOOP
+		bool "No-op"
+		
+	config DEFAULT_SSTF
+		bool "SSTF" if IOSCHED_SSTF=y
+
+endchoice
+
+config DEFAULT_IOSCHED
+	string
+	default "deadline" if DEFAULT_DEADLINE
+	default "cfq" if DEFAULT_CFQ
+	default "noop" if DEFAULT_NOOP
+	default "sstf" if DEFAULT_SSTF
+
+endmenu
+
+endif
diff -ruN OldBlock/block/sstf-iosched.c NewBlock/block/sstf-iosched.c
--- OldBlock/block/sstf-iosched.c	1969-12-31 16:00:00.000000000 -0800
+++ NewBlock/block/sstf-iosched.c	2018-05-05 20:29:43.242678000 -0700
@@ -0,0 +1,186 @@
+/*
+ * elevator sstf
+ * created from base file noop-iosched.c
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+struct sstf_data {
+	struct list_head queue;
+	int head;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+				 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *sd = q->elevator->elevator_data;
+	char direction = 'Z';
+	int sector = 0;
+	if (!list_empty(&sd->queue)) {
+		//printf("Ntest");
+		struct request *rq;
+		rq = list_entry(sd->queue.next, struct request, queuelist);
+		list_del_init(&rq->queuelist);
+		elv_dispatch_sort(q, rq);
+
+		//Print if reading or writing at sector position
+		
+		if (rq_data_dir(rq) == 0){}	//returns 0 for read, nonzero for write
+			direction = 'R';
+		}
+		else{
+			direction = 'W';
+		}
+
+		sector = blk_rq_pos(rq);
+		printk("----- IO dispatch: %c at sector %d.\n",direction,sector);
+		
+		//Save head position
+		sd->head = sector;
+
+		return 1;
+	}
+	return 0;
+}
+
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *sd = q->elevator->elevator_data;
+	/*
+		our C-LOOK logic
+		we will examine the sector of requests, 
+		if it is greater, then add to request queue
+		list_add_tail to add to queue
+		blk_rq_pos or rq_esd_sector? for checking the sector position
+	*/
+	
+	struct list_head *s;
+	
+	//struct request *head_req = list_entry();
+	//int head = blk_rq_pos();
+	
+	//Get entry and determine position
+	list_for_each(s, &sd->queue) {
+		struct request *s_rq = list_entry(s, struct request, queuelist);
+		
+		if(blk_rq_pos(rq) >= sd->head) {
+			//printf("Ntest1");
+			//find queue position s where request belongs
+			if(sd->head > blk_rq_pos(s_rq)){
+				break;	//stop when reaching sector before head
+			}
+			else if(blk_rq_pos(s_rq) > blk_rq_pos(rq)){
+				//printf("Ntest2");
+				break;	//stop when finding greater sector value
+			}
+			//Otherwise continue navigating for each
+		}
+		else {	//Find position in sector before head
+		//printf("Ntest3");
+			if( (sd->head > blk_rq_pos(s_rq)) && (blk_rq_pos(s_rq) > blk_rq_pos(rq)) ){
+				//printf("Ntest4");
+				break;
+			}
+		}
+	}
+	int sector = 0;
+	sector = blk_rq_pos(rq);	
+	printk("----- IO add at sector %d.\n",sector);
+	//Alway attempt to add after s index
+	list_add_tail(&rq->queuelist, s);
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *sd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &sd->queue){
+		return NULL;
+	}
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *sd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &sd->queue){
+		return NULL;
+	}
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *sd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	sd = kmalloc_node(sizeof(*sd), GFP_KERNEL, q->node);
+	if (!sd) {
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = sd;
+
+	INIT_LIST_HEAD(&sd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *sd = e->elevator_data;
+
+	BUG_ON(!list_empty(&sd->queue));
+	kfree(sd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn		= sstf_merged_requests,
+		.elevator_dispatch_fn		= sstf_dispatch,
+		.elevator_add_req_fn		= sstf_add_request,
+		.elevator_former_req_fn		= sstf_former_request,
+		.elevator_latter_req_fn		= sstf_latter_request,
+		.elevator_init_fn		= sstf_init_queue,
+		.elevator_exit_fn		= sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+
+MODULE_AUTHOR("Jens Axboe");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("No-op IO scheduler");
\ No newline at end of file
