diff -ruN First-linux-yocto-3.19/mm/slob.c Best-linux-yocto-3.19/mm/slob.c
--- First-linux-yocto-3.19/mm/slob.c	2018-06-07 15:22:44.336162244 -0700
+++ Best-linux-yocto-3.19/mm/slob.c	2018-06-07 15:29:42.355164575 -0700
@@ -1,4 +1,7 @@
 /*
+ * Modified slob.c to implement a best current fit algorithm
+ *
+ *
  * SLOB Allocator: Simple List Of Blocks
  *
  * Matt Mackall <mpm@selenic.com> 12/30/03
@@ -75,6 +78,8 @@
 #include <linux/atomic.h>
 
 #include "slab.h"
+
+#include <linux/limits.h>
 /*
  * slob_block has a field 'units', which indicates size of block if +ve,
  * or offset of next block if -ve (in SLOB_UNITs).
@@ -223,50 +228,89 @@
  */
 static void *slob_page_alloc(struct page *sp, size_t size, int align)
 {
+	//Current values
 	slob_t *prev, *cur, *aligned = NULL;
-	int delta = 0, units = SLOB_UNITS(size);
-
+	int delta = 0, units = SLOB_UNITS(size), totalData;
+	//Best values
+	slob_t *bprev = NULL, *bcur = NULL, *bnext;
+	int bdelta = SLOB_UNITS(size);
+	
+	slobidx_t avail; //define outside for loop
+
+	//printk("[SLOB.C] ------");
+	
+	//Use for loop to go search all pages for exact fit or best fit
 	for (prev = NULL, cur = sp->freelist; ; prev = cur, cur = slob_next(cur)) {
-		slobidx_t avail = slob_units(cur);
+		avail = slob_units(cur);
 
 		if (align) {
 			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
 			delta = aligned - cur;
 		}
-		if (avail >= units + delta) { /* room enough? */
-			slob_t *next;
 
-			if (delta) { /* need to fragment head to align? */
-				next = slob_next(cur);
-				set_slob(aligned, avail - delta, next);
-				set_slob(cur, delta, aligned);
-				prev = cur;
-				cur = aligned;
-				avail = slob_units(cur);
-			}
+		totalData = delta + units;
 
-			next = slob_next(cur);
-			if (avail == units) { /* exact fit? unlink. */
-				if (prev)
-					set_slob(prev, slob_units(prev), next);
-				else
-					sp->freelist = next;
-			} else { /* fragment */
-				if (prev)
-					set_slob(prev, slob_units(prev), cur + units);
-				else
-					sp->freelist = cur + units;
-				set_slob(cur + units, avail - units, next);
+		//If fit
+		if(avail >= totalData){
+			//Update best values
+			if(bcur == NULL || ((avail - totalData) < bdelta)) {
+				bprev = prev;
+				bcur = cur;
+				bdelta = avail - totalData;
+			}
+		}
+		
+		//Stop if perfect fit
+		if(bdelta == 0){
+				break;
 			}
 
-			sp->units -= units;
-			if (!sp->units)
-				clear_slob_page_free(sp);
-			return cur;
+		if(slob_last(cur)){
+			break; //if no perfect fit was found, stop searching
 		}
-		if (slob_last(cur))
-			return NULL;
 	}
+
+	if (bcur != NULL) { 
+		//Reset values like in previous for loop, assume alignment
+		avail = slob_units(bcur);
+		aligned = (slob_t *)ALIGN((unsigned long)bcur, align);
+		delta = aligned - bcur;
+
+		//Reuse old code, but with best values
+		if (delta) { /* need to fragment head to align? */
+			bnext = slob_next(bcur);
+			set_slob(aligned, avail - delta, bnext);
+			set_slob(bcur, delta, aligned);
+			bprev = bcur;
+			bcur = aligned;
+			avail = slob_units(bcur);
+		}
+
+		bnext = slob_next(bcur);
+		if (avail == units) { /* exact fit? unlink. */
+			if (bprev)
+				set_slob(bprev, slob_units(bprev), bnext);
+			else
+				sp->freelist = bnext;
+		} else { /* fragment */
+			if (bprev)
+				set_slob(bprev, slob_units(bprev), bcur + units);
+			else
+				sp->freelist = bcur + units;
+			set_slob(bcur + units, avail - units, bnext);
+		}
+
+		sp->units -= units;
+		if (!sp->units)
+			clear_slob_page_free(sp);
+		return bcur;
+	}
+
+	
+	
+	
+	return NULL;
+	
 }
 
 /*
